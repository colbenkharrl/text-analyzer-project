import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.Scanner;
import java.util.Vector;

import javax.swing.*;

enum ButtonTransition {
	MAIN_MENU, HELP_MENU, ANALYZE, RECORD, HISTORY_MENU, ANALYZE_HELP, HISTORY_HELP, ABOUT
}

public class AppInterface extends JFrame {
	
	public enum State { MAIN_MENU, HELP_MENU, RECORD, HISTORY, ANALYZING }
		
	private final int FRAME_WIDTH, FRAME_HEIGHT;
	private final JFileChooser fc;
	private File file;
	private JLabel title;
	private MainPanel mainP;
	private State state = State.MAIN_MENU;
	
	public AppInterface() {
		
		//	initialize file chooser
		fc = new JFileChooser();
		
		//	set title
		title = new JLabel("Text Analyzer Pro");
		title.setFont(new Font("Verdana", Font.BOLD, 50));
		title.setHorizontalAlignment(JLabel.CENTER);
		add(title, BorderLayout.NORTH);
		
		//	create menu
		mainP = updateCenterPanel();
		add(mainP, BorderLayout.CENTER);
		
		//	app frame dimensions
		FRAME_WIDTH = 600;
		FRAME_HEIGHT = 800;
		setSize(FRAME_WIDTH, FRAME_HEIGHT);
	}
	
	private MainPanel updateCenterPanel() {
		
		MainPanel r;
		switch(state) {
		case ANALYZING:
			//r = new AnalysisPanel();
			r = new LoadingPanel();
			break;
		case MAIN_MENU:
			r = new MenuPanel();
			break;
		case HELP_MENU:
			r = new HelpPanel();
			break;
		case RECORD:
			r = new RecordPanel();
			break;
		case HISTORY:
			r = new HistoryPanel();
			break;
		default:
			r = new MenuPanel();
			break;
		}
		return r;
	}
	
	public class MainPanel extends JPanel {
		
		public MainPanel() {
			
		}
	}
	
	private class MenuPanel extends MainPanel {
		private MenuButton analyzeBtn, historyBtn, helpBtn;

		public MenuPanel() {
			
			//	set up grid layout
			setLayout(new GridLayout(3, 1));
			
			//	analyze button
			analyzeBtn = new MenuButton("Analyze");
			analyzeBtn.addActionListener(new AnalyzeListener());
			add(analyzeBtn);
			
			//	history button
			historyBtn = new MenuButton("View History");
			historyBtn.addActionListener(new ButtonListener(ButtonTransition.HISTORY_MENU));
			add(historyBtn);
			
			//	help button
			helpBtn = new MenuButton("Get Help");
			helpBtn.addActionListener(new ButtonListener(ButtonTransition.HELP_MENU));
			add(helpBtn);
			
		}
		
		private class AnalyzeListener implements ActionListener {
			public void actionPerformed(ActionEvent event) {
				System.out.println("Choosing file");
				if (event.getSource() == analyzeBtn) {
			        int returnVal = fc.showOpenDialog(LoadingPanel.this);

			        if (returnVal == JFileChooser.APPROVE_OPTION) {
			            File file = fc.getSelectedFile();
			            //This is where a real application would open the file.
			            log.append("Opening: " + file.getName() + "." + newline);
			        } else {
			            log.append("Open command cancelled by user." + newline);
			        }
			   }
			}
		}
	}
	
	private class HelpPanel extends MainPanel {
		private MenuButton aboutBtn, analyzeHelpBtn, historyHelpBtn, returnBtn;

		public HelpPanel() {
			
			//	set up grid layout
			setLayout(new GridLayout(4, 1));
			
			//	about button
			aboutBtn = new MenuButton("About");
			aboutBtn.addActionListener(new ButtonListener(ButtonTransition.ABOUT));
			add(aboutBtn);
			
			//	analyze help button
			analyzeHelpBtn = new MenuButton("Analyze Help");
			analyzeHelpBtn.addActionListener(new ButtonListener(ButtonTransition.ANALYZE_HELP));
			add(analyzeHelpBtn);
			
			//	history help button
			historyHelpBtn = new MenuButton("History Help");
			historyHelpBtn.addActionListener(new ButtonListener(ButtonTransition.HISTORY_HELP));
			add(historyHelpBtn);
			
			//	main menu button
			returnBtn = new MenuButton("Return to Menu");
			returnBtn.addActionListener(new ButtonListener(ButtonTransition.MAIN_MENU));
			add(returnBtn);
			
		}
	}
	
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
	private class AnalysisPanel extends MainPanel {
	//temp in file
		File in = new File(".\\Users\\14lou\\Documents\\Workspace\\TextAnalyzer\\src\\sample0.txt");	//file to be read in
		String[] value = Analyzer.Analyze(in);
		JLabel one = new JLabel(), two = new JLabel(), three = new JLabel(), four = new JLabel(), five = new JLabel(), six = new JLabel(), seven = new JLabel(), eight = new JLabel();
		private JPanel shell = new JPanel();
		JButton done = new JButton("done");
		
		public AnalysisPanel() {
			
			shell.setLayout(new GridLayout(9,1));
			
			one.setText("File: " + in);
			two.setText("Line count: " + value[0]);
			three.setText("Blank line count: " + value[1]);
			four.setText("Space count: " + value[2]);
			five.setText("Word count: " + value[3]);
			six.setText("Average characters per line: " + value[4]);
			seven.setText("Average characters per word: " + value[5]);
			eight.setText("Most common words: " + value[6]);
			
			shell.add(one);
			shell.add(two);
			shell.add(three);
			shell.add(four);
			shell.add(five);
			shell.add(six);
			shell.add(seven);
			shell.add(eight);
			shell.add(done);
			
			add(new JLabel("File statistics: "), BorderLayout.NORTH);
			add(shell, BorderLayout.CENTER);
		}
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

	private class LoadingPanel extends MainPanel {
		
		private MenuButton returnBtn;
		
		public LoadingPanel() {
			
			setLayout(new BorderLayout());
			
			
			JPanel loadingP = new JPanel();
			JLabel text = new JLabel("Analyzing...");
			text.setFont(new Font("Verdana", Font.BOLD, 50));
			text.setHorizontalAlignment(JLabel.CENTER);
			text.setVerticalAlignment(JLabel.CENTER);
			loadingP.setLayout(new GridLayout(1, 1));
			loadingP.setPreferredSize(new Dimension(500, 500));
			loadingP.add(text);
			add(loadingP, BorderLayout.CENTER);
			
			returnBtn = new MenuButton("Cancel");
			returnBtn.addActionListener(new ButtonListener(ButtonTransition.MAIN_MENU));
			returnBtn.setPreferredSize(new Dimension(500, 100));
			
			add(returnBtn, BorderLayout.SOUTH);
		}
	}
	
	private class RecordPanel extends MainPanel {
		public RecordPanel() {
			
			
		}
	}
	
	private class HistoryPanel extends MainPanel {
		
		private JList<String> recordJList;
		private JPanel midPanel, btnPanel;
		private MenuButton deleteHistory, menu;
		private Vector<String> recordList;
		
		public HistoryPanel() {
			
			setLayout(new BorderLayout());
			
			midPanel = new JPanel(new GridLayout(2,1));
			btnPanel = new JPanel(new GridLayout(1, 2));
			btnPanel.setPreferredSize(new Dimension(600, 100));
			
			//	record placeholder
			recordList = new Vector<String>();
			recordList.addElement("record one");
			recordList.addElement("record two");
			recordList.addElement("record three");
			recordList.addElement("record four");
			recordList.addElement("record five");
			
			deleteHistory = new MenuButton("Delete History");
			menu = new MenuButton("Return to Main Menu");
			menu.addActionListener(new ButtonListener(ButtonTransition.MAIN_MENU));
			
			midPanel.add(new RecordSelectionPanel(recordList));
			midPanel.add(new StatAggregationPanel());
			
			btnPanel.add(deleteHistory);
			btnPanel.add(menu);
			
			add(midPanel, BorderLayout.CENTER);
			add(btnPanel, BorderLayout.SOUTH);
		}
		
		private class RecordSelectionPanel extends JPanel {
			
			public RecordSelectionPanel(Vector<String> v) {
				setLayout(new BorderLayout());
				
				recordJList = new JList<String>(v);
				recordJList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
				recordJList.setLayoutOrientation(JList.VERTICAL);
				recordJList.setVisibleRowCount(-1);
				
				JScrollPane scroll = new JScrollPane(recordJList);
				
				add(new JLabel("Select a record to view:"), BorderLayout.NORTH);
				add(scroll, BorderLayout.CENTER);
			}
		}
		private class StatAggregationPanel extends JPanel {
			
			private Vector<String> stats;
			
			public StatAggregationPanel() {
				setLayout(new BorderLayout());
				
				//	stats placeholder
				stats = new Vector<String>();
				stats.addElement("Files seen: ");
				stats.addElement("Line count: ");
				stats.addElement("Blank line count: ");
				stats.addElement("Space count: ");
				stats.addElement("Word count: ");
				stats.addElement("Average characters per line: ");
				stats.addElement("Average word length: ");
				stats.addElement("Common words: ");
				
				
				recordJList = new JList<String>(stats);
				recordJList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
				recordJList.setLayoutOrientation(JList.VERTICAL);
				recordJList.setVisibleRowCount(-1);
				
				JScrollPane scroll = new JScrollPane(recordJList);
				
				add(new JLabel("Average statistics: "), BorderLayout.NORTH);
				add(scroll, BorderLayout.CENTER);
			}
		}
	}
	
	public class MenuButton extends JButton {
		
		public MenuButton(String label) {
			setText(label);
			setFont(new Font("Verdana", Font.BOLD, 20));
		}
	}
	
//	Listener for grid buttons
	private class ButtonListener implements ActionListener {
		
		ButtonTransition transition;
		
		public ButtonListener(ButtonTransition t) {
			transition = t;
		}
		
		public void actionPerformed(ActionEvent event) {
			System.out.println("Button transition to: " + transition);
			remove(mainP);
			switch(transition) {
			case ABOUT:
				break;
			case ANALYZE:
				state = State.ANALYZING;
				//set File in = directory
				break;
			case ANALYZE_HELP:
				break;
			case HELP_MENU:
				state = State.HELP_MENU;
				break;
			case HISTORY_HELP:
				break;
			case HISTORY_MENU:
				state = State.HISTORY;
				break;
			case MAIN_MENU:
				state = State.MAIN_MENU;
				break;
			case RECORD:
				break;
			default:
				break;
			}
			mainP = updateCenterPanel();
			add(mainP, BorderLayout.CENTER);
			revalidate();
			repaint();
		}
	}
}
